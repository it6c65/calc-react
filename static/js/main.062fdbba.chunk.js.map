{"version":3,"sources":["components/Button.js","components/Action.js","App.js","serviceWorker.js","index.js"],"names":["Equal","className","onClick","this","props","show","React","Component","Zero","addZero","Number","whatNumber","number","children","Operator","addOperator","operator","Reset","reset","Do","first","second","Calc","state","firstNumb","secondNumb","result","value","setState","String","array","map","num","key","toString","putNumber","bind","second_number","results","title","id","rowNumbers","changeOperator","resetValues","showResults","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.062fdbba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\n//button for show the results of the operations\nclass Equal extends React.Component {\n  static propTypes = {\n    show: PropTypes.func\n  }\n  render(){\n    return(\n      <button className=\"btn-equal\" onClick={this.props.show}>=</button>\n    );\n  }\n}\n\n// button for add zeros in the screen\nclass Zero extends React.Component {\n  static propTypes = {\n    addZero: PropTypes.func\n  }\n  render(){\n    return(\n      <button className=\"btn-number\" onClick={this.props.addZero(0)}>0</button>\n    );\n  }\n}\n\n// button numbers of the calc\nclass Number extends React.Component {\n  static propTypes = {\n    whatNumber: PropTypes.func,\n    number: PropTypes.number\n  }\n  render(){\n    return (\n      <button className=\"btn-number\" onClick={this.props.whatNumber(this.props.number)}>{this.props.children}</button>\n    );\n  }\n}\n\n// button operators of the calc\nclass Operator extends React.Component {\n  static propTypes = {\n    addOperator: PropTypes.func,\n    operator: PropTypes.string\n  }\n  render(){\n    return (\n      <button className=\"btn-operator\" onClick={this.props.addOperator(this.props.operator)}>{this.props.children}</button>\n    );\n  }\n}\n\n// button for delete all\nclass Reset extends React.Component {\n  static propTypes = {\n    reset: PropTypes.func\n  }\n  render(){\n    return (\n      <button className=\"btn-number\" onClick={this.props.reset}>C</button>\n    );\n  }\n}\n\nexport {Number, Operator, Zero, Equal, Reset};\n","// Do the operations needed\n// expressed cleaned\nlet Do = {\n    \"+\": (first, second) => {\n    return first + second;\n    },\n    \"-\": (first, second) => {\n    return first - second;\n    },\n    \"*\": (first, second) => {\n    return first * second;\n    },\n    \"/\": (first, second) => {\n    return first / second;\n    },\n    \"\": (first, second) => {\n    return 0\n    }\n}\nexport default Do;\n","import React from 'react';\nimport './App.css';\nimport * as Button from './components/Button'\nimport Do from './components/Action'\nimport PropTypes from 'prop-types'\n\nclass Calc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { firstNumb: 0, secondNumb: 0, operator: \"\", result: 0 };\n  }\n  static propTypes = {\n    title: PropTypes.string\n  }\n  static defaultProps = {\n    title: \"React - Calculator\"\n  }\n  // Put number in the screen\n  putNumber(value) {\n    return () => {\n      // If there is a result, change it with the first numb\n      if (this.state.result !== 0) {\n        this.setState({\n          firstNumb: this.state.result, secondNumb: value, result: 0\n        });\n      } else {\n        // While there is no operator exists the second numbs are forbidden\n        if (this.state.operator !== \"\") {\n          // If the first time just one value with second number\n          if (this.state.secondNumb === 0) {\n            this.setState({\n              secondNumb: value\n            });\n            // the second time and after, change to string both values,\n            // add another string and change a integer again with second number\n          } else {\n            this.setState({\n              secondNumb: Number(String(this.state.secondNumb) + String(value))\n            });\n          }\n        } else {\n          // If the first time just one value with first number\n          if (this.state.firstNumb === 0) {\n            this.setState({\n              firstNumb: value\n            });\n            // the second time and after, change to string both values,\n            // add another string and change a integer again with first number\n          } else {\n            this.setState({\n              firstNumb: Number(String(this.state.firstNumb) + String(value))\n            });\n          }\n        }\n      }\n    }\n  }\n  // change the operator what calc will use\n  changeOperator(value) {\n    return () => {\n      this.setState({\n        operator: value\n      })\n    }\n  }\n  showResults() {\n    // put the result of operation in the state\n    // for show it in the screen\n    this.setState(state => ({\n      result: Do[state.operator](state.firstNumb, state.secondNumb)\n    }));\n  }\n  // Delete all values\n  resetValues() {\n    this.setState(state => ({\n      firstNumb: 0, secondNumb: 0, result: 0, operator: \"\"\n    }));\n  }\n  rowNumbers(array){\n    let numbers = array;\n    let listNumbers = numbers.map((num) =>\n        <Button.Number key={num.toString()} number={Number(num)} whatNumber={this.putNumber.bind(this)}>{num.toString()}</Button.Number>\n    );\n    return listNumbers;\n  }\n  render() {\n    let second_number, results;\n    // if second number is cero not show in screen\n    if (this.state.secondNumb === 0) {\n      second_number = \"\";\n    } else {\n      second_number = this.state.secondNumb;\n    }\n    // the same with result\n    if (this.state.result === 0) {\n      results = \"\";\n    } else {\n      results = \"= \" + this.state.result;\n    }\n    let firstRow = [1,2,3];\n    let mediumRow = [4,5,6];\n    let lastRow = [7,8,9];\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <div className=\"show-results\">\n          {/* operations and final results */}\n          <div className=\"results\">\n            <div> {this.state.firstNumb} {this.state.operator} {second_number} </div>\n            <div id=\"result\">\n              {results}\n            </div>\n          </div>\n        </div>\n        <div className=\"buttons\">\n          <div>\n            <div>\n              {this.rowNumbers(firstRow)}\n            </div>\n            <div>\n              {this.rowNumbers(mediumRow)}\n            </div>\n            <div>\n              {this.rowNumbers(lastRow)}\n            </div>\n          </div>\n          <div className=\"operations\">\n            <Button.Operator operator=\"+\" addOperator={this.changeOperator.bind(this)}>+</Button.Operator>\n            <Button.Operator operator=\"-\" addOperator={this.changeOperator.bind(this)}>-</Button.Operator>\n            <Button.Operator operator=\"*\" addOperator={this.changeOperator.bind(this)}>&times;</Button.Operator>\n            <Button.Operator operator=\"/\" addOperator={this.changeOperator.bind(this)}>&divide;</Button.Operator>\n          </div>\n        </div>\n        <Button.Reset reset={this.resetValues.bind(this)} />\n        <Button.Zero addZero={this.putNumber.bind(this)} />\n        <Button.Equal show={this.showResults.bind(this)} />\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <main>\n        <Calc />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}